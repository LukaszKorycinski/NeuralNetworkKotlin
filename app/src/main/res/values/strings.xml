<resources>
    <string name="app_name">NeuralNetworkKotlin</string>



    <string name="vs_anim">

        uniform mat4 uMVPMatrix;
        uniform mat4 bonesMatrices[4];
        attribute vec4 vPosition;
        attribute vec3 vNormal;
        attribute vec2 vTexCoord;
        varying vec2 texCoord;
        varying float boneIndex;

        void main() {

            boneIndex = vPosition.w;
            int boneIntIndex = int(vPosition.w);

            vec4 position = bonesMatrices[boneIntIndex] * vec4(vPosition.xyz, 1.0);



            gl_Position = uMVPMatrix * vec4(vPosition.xyz, 1.0);



            texCoord = vTexCoord;
        }
    </string>

    <string name="ps_anim"><![CDATA[

        precision mediump float;
        uniform sampler2D u_Texture;
        varying vec2 texCoord;
        varying float boneIndex;

        void main() {

        vec4 color = texture2D(u_Texture, texCoord);

        if(color.a<0.5){
            discard;
        }


        gl_FragColor = color;
        }

    ]]></string>



    <string name="vs_basic">

        uniform mat4 uMVPMatrix;
        attribute vec4 vPosition;
        attribute vec3 vNormal;
        attribute vec2 a_TexCoordinate;
        varying vec2 texCoord;

        void main() {

            gl_Position = uMVPMatrix * vec4(vPosition.xyz, 1.0);

            texCoord = a_TexCoordinate;
        }
    </string>

    <string name="ps_basic"><![CDATA[

        precision mediump float;
        uniform sampler2D u_Texture;
        varying vec2 texCoord;

        void main() {

        vec4 color = texture2D(u_Texture, texCoord);

        if(color.a<0.5){
            discard;
        }

        gl_FragColor = color;
        }

    ]]></string>


    <string name="ps_creatures"><![CDATA[

        precision mediump float;
        uniform sampler2D u_Texture;
        uniform vec3 colorAccent;
        varying vec2 texCoord;

        void main() {

        vec4 color = texture2D(u_Texture, texCoord);
        color.rgb = color.rgb * colorAccent;

        if(color.a<0.5){
            discard;
        }

        gl_FragColor = color;
        }

    ]]></string>



    <string name="ps_seed"><![CDATA[

        precision mediump float;
        uniform sampler2D u_Texture;
        uniform float age;
        varying vec2 texCoord;

        void main() {

        vec4 color = texture2D(u_Texture, texCoord);

        color.r = color.r * age;
        color.g = (1.0-age);

        if(color.a<0.5){
            discard;
        }

        gl_FragColor = color;
        }

    ]]></string>



    <string name="vs_grass">

        uniform mat4 uMVPMatrix;
        uniform float wave;
        attribute vec4 vPosition;
        attribute vec3 vNormal;
        attribute vec2 a_TexCoordinate;
        varying vec2 texCoord;

        void main() {


            vec4 outPos = vPosition;
            vec4 nvpPos = uMVPMatrix * vec4(vPosition.xyz, 1.0);

            outPos.x = outPos.x + sin(wave + outPos.z*100.0 + nvpPos.x*0.5)*0.25*outPos.y;

            gl_Position = uMVPMatrix * vec4(outPos.xyz, 1.0);

            texCoord = a_TexCoordinate;
        }
    </string>



    <string name="ps_grass"><![CDATA[

        precision mediump float;
        uniform sampler2D u_Texture;

        varying vec2 texCoord;

        void main() {

        vec4 color = texture2D(u_Texture, texCoord);


        if(color.a<0.5){
            discard;
        }

        gl_FragColor = color;
        }

    ]]></string>




    <string name="vs_terrain">

        uniform mat4 uMVPMatrix;
        attribute vec4 vPosition;
        attribute vec3 vNormal;
        attribute vec2 a_TexCoordinate;
        varying vec2 texCoord;

        void main() {

            gl_Position = uMVPMatrix * vec4(vPosition.xyz, 1.0);

            texCoord = a_TexCoordinate;
        }
    </string>

    <string name="ps_terrain"><![CDATA[

        precision mediump float;
        uniform sampler2D u_Texture;
        uniform sampler2D u_TextureTerrain;
        uniform sampler2D u_TextureTerrain2;
        uniform sampler2D u_TextureTerrain3;
        varying vec2 texCoord;

        void main() {

        vec4 alpha = texture2D(u_Texture, texCoord);

        vec2 texCoordColor = texCoord * 5.0;

        vec4 color = texture2D(u_TextureTerrain, texCoordColor);
        vec4 color2 = texture2D(u_TextureTerrain2, texCoordColor);
        vec4 color3 = texture2D(u_TextureTerrain3, texCoordColor);

        if(alpha.a<0.5){
            discard;
        }

        gl_FragColor = (color*alpha.r + color2*alpha.g + color3*alpha.b);
        }

    ]]></string>

    <string name="vs_background">

        uniform mat4 uMVPMatrix;
        uniform vec3 eyePosition;
        uniform float modelPositionIN;

        attribute vec4 vPosition;
        attribute vec2 a_TexCoordinate;

        varying vec2 v_TexCoordinate;
        varying float modelPosition;

        void main() {
            modelPosition = modelPositionIN;

            gl_Position = uMVPMatrix * vPosition;

            vec2 paralaxTexcoord = a_TexCoordinate;

            float parallax = modelPosition * 0.1;

            paralaxTexcoord.x = paralaxTexcoord.x + eyePosition.x*parallax;
            paralaxTexcoord.y = paralaxTexcoord.y + eyePosition.y*parallax;

            v_TexCoordinate = paralaxTexcoord;
        }
    </string>

    <string name="ps_background"><![CDATA[

        precision mediump float;
        uniform sampler2D u_Texture;
        uniform float wave;
        varying vec2 v_TexCoordinate;
        varying float modelPosition;

        void main() {
            vec2 texCoord = v_TexCoordinate;

            float length = texture2D(u_Texture, texCoord).g*0.02;

            float localVawe = wave+modelPosition*5.0;

            texCoord.x = texCoord.x + sin(localVawe)*length;
            texCoord.y = texCoord.y - abs(sin(localVawe)*length*0.05);

            vec4 color = texture2D(u_Texture, texCoord);

            vec4 paint = vec4(1.0, 0.709, 0.1, 1.0);

            if( color.r<0.5 ){
                discard;
            }

            gl_FragColor = paint * (0.1+vec4(1.0-modelPosition)*0.7);
        }
    ]]></string>



    <string name="vs_fog">

        uniform mat4 uMVPMatrix;
        uniform vec3 eyePosition;
        uniform float modelPositionIN;
        uniform float wave;
        uniform float waveSin;

        attribute vec4 vPosition;
        attribute vec2 a_TexCoordinate;

        varying vec2 v_TexCoordinate;
        varying float modelPosition;

        void main() {
            modelPosition = modelPositionIN;

            gl_Position = uMVPMatrix * vPosition;

            vec2 paralaxTexcoord = a_TexCoordinate;

            float parallax = modelPosition * 0.1;

            paralaxTexcoord.x = paralaxTexcoord.x + eyePosition.x*parallax + wave;
            paralaxTexcoord.y = paralaxTexcoord.y + eyePosition.y*parallax + sin(waveSin+modelPosition)*0.02;

            v_TexCoordinate = paralaxTexcoord;
        }
    </string>

    <string name="ps_fog"><![CDATA[

        precision mediump float;
        uniform sampler2D u_Texture;
        varying vec2 v_TexCoordinate;
        varying float modelPosition;

        void main() {
            vec2 texCoord = v_TexCoordinate;

            vec4 color = texture2D(u_Texture, texCoord);



            color = vec4(1.0, 0.709, 0.1, color.b);

            gl_FragColor = color;
        }
    ]]></string>







    <string name="vs_sky"><![CDATA[

        uniform mat4 uMVPMatrix;
        uniform float wave;
        attribute vec4 vPosition;
        attribute vec2 a_TexCoordinate;
        varying vec2 v_TexCoordinate;

        void main() {
            gl_Position = uMVPMatrix * vPosition;
            v_TexCoordinate = a_TexCoordinate;
        }
    ]]></string>

    <string name="ps_sky"><![CDATA[

        precision mediump float;
        uniform sampler2D u_Texture;
        varying vec2 v_TexCoordinate;

        void main() {

            vec4 color = texture2D(u_Texture, v_TexCoordinate);

            gl_FragColor = color;
        }
    ]]></string>

</resources>
